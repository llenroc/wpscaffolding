<#@ template language="C#" HostSpecific="True"  inherits="DynamicTransform" #>
<#@ Output Extension="xaml" #>
<#@ assembly name="System.Data.Entity" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="EnvDTE" #>
<#  
    var modelType = (CodeType)Model.ModelType; 
    var modelName = modelType.Name;//title for single model object
    var modelNameTitle = modelName.ToLower();
    var modelNameLowerFirstLetter =  modelName.ToLower()[0] + modelName.Substring(1);
    var modelVariable = modelName.ToLower();
    
    var modelNamePlural = Model.ModelTypePluralized;
    var modelNamePluralTitle = modelNamePlural.ToLower();
    var modelNamePluralLowerFirstLetter = modelNamePlural.ToLower()[0] + modelNamePlural.Substring(1);
    var modelTypeNamespace = Model.ModelTypeNamespace;
    var defaultNamespace = Model.DefaultNamespace;

    string applicationTitle = Model.DefaultNamespace;
    
    string dbFileName = defaultNamespace;//isostore:/dbname.sdf
    //var relatedEntities = ((IEnumerable)Model.RelatedEntities).OfType<RelatedEntityInfo>();
    var primaryKeyProperty = modelType.VisibleMembers().OfType<CodeProperty>().Single(x => x.Name == Model.PrimaryKey);
    var primaryKeyPropertyType = "int";

    var viewName = Model.ViewName;
    var viewNamespace = Model.ViewNamespace;
    var viewFullName = viewNamespace + "." + viewName;
    
    var viewModelName = Model.ViewModelName;
    var viewModelNamespace = Model.ViewModelNamespace;
    var designViewModelDataFile = "../SampleData/" + viewModelName + "DesignData.xaml";
    
    var dataContextType = Model.DataContextTypeName;
#>
<phone:PhoneApplicationPage 
    x:Class="<#= viewFullName #>"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:phone="clr-namespace:Microsoft.Phone.Controls;assembly=Microsoft.Phone"
    xmlns:shell="clr-namespace:Microsoft.Phone.Shell;assembly=Microsoft.Phone"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    FontFamily="{StaticResource PhoneFontFamilyNormal}"
    FontSize="{StaticResource PhoneFontSizeNormal}"
    Foreground="{StaticResource PhoneForegroundBrush}"
    SupportedOrientations="Portrait" Orientation="Portrait"
    mc:Ignorable="d" d:DesignHeight="696" d:DesignWidth="480"
    shell:SystemTray.IsVisible="True"
	d:DataContext="{d:DesignData <#= designViewModelDataFile #>}"
	>

    <!--LayoutRoot is the root grid where all page content is placed-->
    <Grid x:Name="LayoutRoot" Background="Transparent">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <!--TitlePanel contains the name of the application and page title-->
        <StackPanel x:Name="TitlePanel" Grid.Row="0" Margin="12,17,0,28">
            <TextBlock x:Name="ApplicationTitle" Text="<#= applicationTitle #>" Style="{StaticResource PhoneTextNormalStyle}"/>
            <TextBlock x:Name="PageTitle" Text="<#= modelNamePluralTitle #>" Margin="9,-7,0,0" Style="{StaticResource PhoneTextTitle1Style}"/>
        </StackPanel>

        <!--ContentPanel - place additional content here-->
        <Grid x:Name="ContentPanel" Grid.Row="1" Margin="12,0,12,0">
			<ListBox x:Name="<#= modelNamePlural #>ListBox" Grid.Row="1" Margin="0,0,-12,0" ItemsSource="{Binding <#= modelNamePlural #>}" SelectionChanged="<#= modelNamePlural #>ListBox_SelectionChanged">
				<ListBox.ItemTemplate>
					<DataTemplate>
						<StackPanel Orientation="Horizontal" Margin="0,0,0,17">
							<StackPanel Width="311">
								<!--Properties iteration-->
								<#
								int propertyCounter = 0;
								foreach (ModelProperty property in GetModelProperties(modelType, true)) 
								{
									propertyCounter++;	                              
									string propertyName = property.Name;
									//make first property with large text style and next properties with smaller 	                            
	                                string propertyTextStyle = propertyCounter == 1 ? "PhoneTextExtraLargeStyle" : "PhoneTextSubtleStyle";
	                                string propertyMargin = propertyCounter ==1	? "" : "Margin=\"12,-6,12,0\"";                         	                            
#>
								<TextBlock Text="{Binding <#= propertyName #>}" TextWrapping="Wrap" <#= propertyMargin #> Style="{StaticResource <#= propertyTextStyle #>}"/>
<#
								}
#>
							</StackPanel>
						</StackPanel>
					</DataTemplate>
				</ListBox.ItemTemplate>
			</ListBox>
		</Grid>
    </Grid>
 
    <phone:PhoneApplicationPage.ApplicationBar>
        <shell:ApplicationBar IsVisible="True" IsMenuEnabled="True">
			<shell:ApplicationBarIconButton IconUri="/Images/appbar.add.rest.png" Text="add" x:Name="AddButton" Click="AddButton_Click"/>
			<shell:ApplicationBarIconButton IconUri="/Images/appbar.refresh.rest.png" Text="refresh" x:Name="RefreshButton" Click="RefreshButton_Click"/>
            <!--<shell:ApplicationBar.MenuItems>
                <shell:ApplicationBarMenuItem Text="MenuItem 1"/>
                <shell:ApplicationBarMenuItem Text="MenuItem 2"/>
            </shell:ApplicationBar.MenuItems>-->
        </shell:ApplicationBar>
    </phone:PhoneApplicationPage.ApplicationBar>

</phone:PhoneApplicationPage>

<#+
public void GenerateDataGridColumns(EnvDTE.CodeType codeType, bool areFieldsEditable)
{
	foreach (ModelProperty property in GetModelProperties(codeType, true)) 
	{
		string propertyValue = string.Empty;
		string propertyName = property.Name;
		string propertyNameLowerFirstLetter = propertyName.ToLower()[0] + propertyName.Substring(1);

		if ((property.Type.IsType(typeof(decimal)))
		 || (property.Type.IsType(typeof(double)))
		 || (property.Type.IsType(typeof(int))))
		{
			if (areFieldsEditable)
			{
#>
				<sdk:DataGridTemplateColumn Header="<#= propertyName #>">
					<sdk:DataGridTemplateColumn.CellTemplate>
						<DataTemplate>
							<TextBox Text="{Binding <#= propertyName #>}" Margin="2"/>
						</DataTemplate>
					</sdk:DataGridTemplateColumn.CellTemplate>
				</sdk:DataGridTemplateColumn>
<#+
			}
			else
			{
#>
				<sdk:DataGridTemplateColumn Header="<#= propertyName #>">
					<sdk:DataGridTemplateColumn.CellTemplate>
						<DataTemplate>
							<TextBlock Text="{Binding <#= propertyName #>}" Margin="2"/>
						</DataTemplate>
					</sdk:DataGridTemplateColumn.CellTemplate>
				</sdk:DataGridTemplateColumn>
<#+                                                                                                                                                                                                                                                                                                                                                                                                          
			}
		}
		else if (property.Type.IsType(typeof(string)))
		{
			if (areFieldsEditable)
			{
#>
				<sdk:DataGridTemplateColumn Header="<#= propertyName #>">
					<sdk:DataGridTemplateColumn.CellTemplate>
						<DataTemplate>
							<TextBox Text="{Binding <#= propertyName #>}" Margin="2"/>
						</DataTemplate>
					</sdk:DataGridTemplateColumn.CellTemplate>
				</sdk:DataGridTemplateColumn>
<#+
			}
			else
			{
#>
				<sdk:DataGridTemplateColumn Header="<#= propertyName #>">
					<sdk:DataGridTemplateColumn.CellTemplate>
						<DataTemplate>
							<TextBlock Text="{Binding <#= propertyName #>}" Margin="2"/>
						</DataTemplate>
					</sdk:DataGridTemplateColumn.CellTemplate>
				</sdk:DataGridTemplateColumn>
<#+                                                                                                                                                                                                                                                                                                                                                                                                          
			}
	
		}
		else if (property.Type.IsType(typeof(DateTime)))
		{
			if (areFieldsEditable)
			{
#>
				<sdk:DataGridTemplateColumn Header="<#= propertyName #>">
					<sdk:DataGridTemplateColumn.CellTemplate>
						<DataTemplate>
							<TextBox Text="{Binding <#= propertyName #>}" Margin="2"/>
						</DataTemplate>
					</sdk:DataGridTemplateColumn.CellTemplate>
				</sdk:DataGridTemplateColumn>
<#+
			}
			else
			{
#>
				<sdk:DataGridTemplateColumn Header="<#= propertyName #>">
					<sdk:DataGridTemplateColumn.CellTemplate>
						<DataTemplate>
							<TextBlock Text="{Binding <#= propertyName #>}" Margin="2"/>
						</DataTemplate>
					</sdk:DataGridTemplateColumn.CellTemplate>
				</sdk:DataGridTemplateColumn>
<#+                                                                                                                                                                                                                                                                                                                                                                                                          
			}

		}        
		else 
		{
			if (areFieldsEditable)
			{
#>
				<sdk:DataGridTemplateColumn Header="<#= propertyName #>">
					<sdk:DataGridTemplateColumn.CellTemplate>
						<DataTemplate>
							<TextBox Text="{Binding <#= propertyName #>}" Margin="2"/>
						</DataTemplate>
					</sdk:DataGridTemplateColumn.CellTemplate>
				</sdk:DataGridTemplateColumn>
<#+
			}
			else
			{
#>
				<sdk:DataGridTemplateColumn Header="<#= propertyName #>">
					<sdk:DataGridTemplateColumn.CellTemplate>
						<DataTemplate>
							<TextBlock Text="{Binding <#= propertyName #>}" Margin="2"/>
						</DataTemplate>
					</sdk:DataGridTemplateColumn.CellTemplate>
				</sdk:DataGridTemplateColumn>
<#+                                                                                                                                                                                                                                                                                                                                                                                                          
			}

		}        
	}

}


#>

<#+
// Describes the information about a property on the model
class ModelProperty {
	public string Name { get; set; }
	public string ValueExpression { get; set; }
	public EnvDTE.CodeTypeRef Type { get; set; }
	public bool IsPrimaryKey { get; set; }
	public bool IsForeignKey { get; set; }
	public bool IsReadOnly { get; set; }
}

// Change this list to include any non-primitive types you think should be eligible to be edited using a textbox
static Type[] bindableNonPrimitiveTypes = new[] {
	typeof(string),
	typeof(decimal),
	typeof(Guid),
	typeof(DateTime),
	typeof(DateTimeOffset),
	typeof(TimeSpan),
};

// Call this to get the list of properties in the model. Change this to modify or add your
// own default formatting for display values.
List<ModelProperty> GetModelProperties(EnvDTE.CodeType typeInfo, bool includeUnbindableProperties) {
	List<ModelProperty> results = GetEligibleProperties(typeInfo, includeUnbindableProperties);
	
	foreach (ModelProperty prop in results) {
		if (prop.Type.UnderlyingTypeIs<double>() || prop.Type.UnderlyingTypeIs<decimal>()) {
			prop.ValueExpression = "String.Format(\"{0:F}\", " + prop.ValueExpression + ")";
		}
		else if (prop.Type.UnderlyingTypeIs<DateTime>()) {
			prop.ValueExpression = "String.Format(\"{0:g}\", " + prop.ValueExpression + ")";
		}
		else if (!IsBindableType(prop.Type)) {
			prop.ValueExpression = GetValueExpression("Model." + prop.Name, (EnvDTE.CodeType)prop.Type.CodeType);
		}
	}

	return results;
}

// Change this list to include the names of properties that should be selected to represent an entity as a single string
static string[] displayPropertyNames = new[] { "Name", "Title", "LastName", "Surname", "Subject", "Count" };

string GetValueExpression(string propertyExpression, EnvDTE.CodeType propertyType) {
	if (propertyType != null) {
		var chosenSubproperty = propertyType.DisplayColumnProperty() ?? propertyType.FindProperty(displayPropertyNames);
		if (chosenSubproperty != null) {
			var toStringSuffix = chosenSubproperty.Type.AsFullName == "System.String" ? "" : ".ToString()";
			return String.Format("({0} == null ? \"None\" : {0}.{1}{2})", propertyExpression, chosenSubproperty.Name, toStringSuffix);
		}
	}
	return propertyExpression;
}

// Helper
List<ModelProperty> GetEligibleProperties(EnvDTE.CodeType typeInfo, bool includeUnbindableProperties) {
	List<ModelProperty> results = new List<ModelProperty>();
	if (typeInfo != null) {
		foreach (var prop in typeInfo.VisibleMembers().OfType<EnvDTE.CodeProperty>()) {
			if (prop.IsReadable() && !prop.HasIndexParameters() && (includeUnbindableProperties || IsBindableType(prop.Type))) {
				results.Add(new ModelProperty {
					Name = prop.Name,
					ValueExpression = prop.Name,
					Type = prop.Type,
					IsPrimaryKey = Model.PrimaryKeyName == prop.Name,
					IsForeignKey = ParentRelations.Any(x => x.RelationProperty == prop),
					IsReadOnly = !prop.IsWriteable()
				});
			}
		}
	}

	return results;
}

IEnumerable<RelatedEntityInfo> ParentRelations {
	get { return ((IEnumerable)Model.RelatedEntities).OfType<RelatedEntityInfo>().Where(x => x.RelationType == RelationType.Parent); }
}

IEnumerable<RelatedEntityInfo> ChildRelations {
	get { return ((IEnumerable)Model.RelatedEntities).OfType<RelatedEntityInfo>().Where(x => x.RelationType == RelationType.Child); }
}

//Helper
bool IsBindableType(EnvDTE.CodeTypeRef type) {
	return type.UnderlyingIsPrimitive() || bindableNonPrimitiveTypes.Any(x => type.UnderlyingTypeIs(x));
}
#>
