<#@ template language="C#" HostSpecific="True"  inherits="DynamicTransform" #>
<#@ Output Extension="cs" #>
<#@ assembly name="System.Data.Entity" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="EnvDTE" #>
<#  
    var modelType = (CodeType)Model.ModelType; 
    var modelName = modelType.Name;
    var modelNameLowerFirstLetter =  modelName.ToLower()[0] + modelName.Substring(1);
    var modelVariable = modelName.ToLower();
    
    var modelNamePlural = Model.ModelTypePluralized;
    var modelNamePluralLowerFirstLetter = modelNamePlural.ToLower()[0] + modelNamePlural.Substring(1);
    var modelTypeNamespace = Model.ModelTypeNamespace;
    var defaultNamespace = Model.DefaultNamespace;
    
    string dbFileName = defaultNamespace;//isostore:/dbname.sdf
    //var relatedEntities = ((IEnumerable)Model.RelatedEntities).OfType<RelatedEntityInfo>();
    var primaryKeyProperty = modelType.VisibleMembers().OfType<CodeProperty>().Single(x => x.Name == Model.PrimaryKey);
    var primaryKeyPropertyType = "int";
    
    var viewModelName = Model.ViewModelName;
    var viewModelNamespace = Model.ViewModelNamespace;

    var dataContextType = Model.DataContextTypeName;
#>

using System;
using System.Windows;
using <#= modelTypeNamespace #>;
using System.Collections.ObjectModel;
using WpScaffolding.Helpers;//using <#= defaultNamespace #>.Helpers;
using System.ComponentModel;
using Microsoft.Phone.Controls;

namespace <#= viewModelNamespace #>
{
	public class <#= viewModelName #> : INotifyPropertyChanged
	{
		public const string connectionString = "isostore:/<#= dbFileName #>.sdf";

		<#= dataContextType #> _context;

		public <#= viewModelName #>()
			: this(new <#= dataContextType #>(connectionString))
		{ }

		public <#= viewModelName #>(<#= dataContextType #> context)
		{
			if (context == null)
			{
				throw new ArgumentNullException("repository must not be null");
			}
			this._context = context;
			//create database if not exists
			if (!_context.DatabaseExists())
			{
				_context.CreateDatabase();
			}
		}

		private ObservableCollection<<#= modelName #>> _<#= modelNamePluralLowerFirstLetter #>;
		public ObservableCollection<<#= modelName #>> <#= modelNamePlural #>
		{
			get
			{
				return _<#= modelNamePluralLowerFirstLetter #>;
			}

			set
			{
				if (_<#= modelNamePluralLowerFirstLetter #> == value)
				{
					return;
				}
				_<#= modelNamePluralLowerFirstLetter #> = value;
				NotifyPropertyChanged("<#= modelNamePlural #>");
			}
		}

		private <#= modelName #> _selected<#= modelName #>;
		public <#= modelName #> Selected<#= modelName #>
		{
			get
			{
				return _selected<#= modelName #>;
			}

			set
			{
				if (_selected<#= modelName #> == value)
				{
					return;
				}
				_selected<#= modelName #> = value;
				NotifyPropertyChanged("Selected<#= modelName #>");
			}
		}

		#region CreateCommand
		private RelayCommand _createCommand;
		public RelayCommand CreateCommand
		{
			get
			{
				if (_createCommand == null)
				{
					_createCommand =
						new RelayCommand(
							() =>
							{
								Create<#= modelName #>Execute();
							}
						);
				}
				return _createCommand;
			}
			set
			{
				_createCommand = value;
			}
		}

		/// <summary>
		/// Navigates to Create view. Executes when CreateCommand is executed
		/// </summary>
		public void Create<#= modelName #>Execute()
		{
			//TODO: Check if that is the CreateView url
			string uriAddress = "/Views/<#= modelName #>CreateView.xaml";
			Navigate(new Uri(uriAddress, UriKind.Relative));
		}

		#endregion

		#region EditCommand
		private RelayCommand<<#= modelName #>> _editCommand;
		public RelayCommand<<#= modelName #>> EditCommand
		{
			get
			{
				if (_editCommand == null)
				{
					_editCommand =
						new RelayCommand<<#= modelName #>>(
							(item) =>
							{
								Edit<#= modelName #>Execute(item);
							},
							(item) => item != null
						);
				}
				return _editCommand;
			}
			set
			{
				_editCommand = value;
			}
		}

		/// <summary>
		/// Navigates to Edit view
		/// </summary>
		/// <param name="<#= modelNameLowerFirstLetter #>"></param>
		public void Edit<#= modelName #>Execute(<#= modelName #> <#= modelNameLowerFirstLetter #>)
		{
			if (<#= modelNameLowerFirstLetter #> == null)
			{
				return;
			}

			int <#= modelNameLowerFirstLetter #>Id = <#= modelNameLowerFirstLetter #>.<#= modelName #>Id;
			NavigateTo<#= modelName #>Edit(<#= modelNameLowerFirstLetter #>Id);
		}

		/// <summary>
		/// Navigates to EditView passing the entity id to edit
		/// </summary>
		/// <param name="id"></param>
		private static void NavigateTo<#= modelName #>Edit(<#= primaryKeyPropertyType #> id)
		{
			//TODO: Check if that is the EditView url
			string uriAddress = string.Format("/Views/<#= modelName #>EditViewPage.xaml?id={0}", id);
			Navigate(new Uri(uriAddress, UriKind.Relative));
		}

		#endregion

		#region ViewDetailsCommand
		private RelayCommand<<#= modelName #>> _viewDetailsCommand;
		public RelayCommand<<#= modelName #>> ViewDetailsCommand
		{
			get
			{
				if (_viewDetailsCommand == null)
				{
					_viewDetailsCommand =
						new RelayCommand<<#= modelName #>>(
							(param) =>
							{
								ViewDetailsExecute(param);
							},
							(param) => param != null
						);
				}
				return _viewDetailsCommand;
			}
			set
			{
				_viewDetailsCommand = value;
			}
		}

		public void ViewDetailsExecute(<#= modelName #> <#= modelNameLowerFirstLetter #>)
		{
			var selected<#= modelName #> = <#= modelNameLowerFirstLetter #>;
			//if (Selected<#= modelName #> == null)
			//{
			//    return;
			//}

			int <#= modelNameLowerFirstLetter #>Id = selected<#= modelName #>.<#= modelName #>Id;
			NavigateTo<#= modelName #>Details(<#= modelNameLowerFirstLetter #>Id);
		}

		/// <summary>
		/// Navigates to Details view
		/// </summary>
		/// <param name="id"></param>
		private static void NavigateTo<#= modelName #>Details(<#= primaryKeyPropertyType #> id)
		{
			//TODO: Check if that is the DetailsView url
			string uriAddress = string.Format("/Views/<#= modelName #>DetailsView.xaml?id={0}", id);
			Navigate(new Uri(uriAddress, UriKind.Relative));
		}

		#endregion

		/// <summary>
		/// Loads entities list
		/// </summary>
		public void Load()
		{
			var <#= modelNamePluralLowerFirstLetter #> = _context.<#= modelNamePlural #>;
			this.<#= modelNamePlural #> = new ObservableCollection<<#= modelName #>>(<#= modelNamePluralLowerFirstLetter #>);
		}

		/// <summary>
		/// Clean up resources here
		/// </summary>
		public void Cleanup()
		{
			<#= modelNamePlural #> = new ObservableCollection<<#= modelName #>>();
			Selected<#= modelName #> = null;
		}

		#region INotifyPropertyChanged
		//TODO: Extact INotifyPropertyChanged into a separate base class (ViewModelBase recommended)
		public event PropertyChangedEventHandler PropertyChanged;
		private void NotifyPropertyChanged(String propertyName)
		{
			PropertyChangedEventHandler handler = PropertyChanged;
			if (null != handler)
			{
				handler(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		#endregion

		#region Navigation
		//TODO: Extract navigation into a separate class (NavigationController recommended)
		private static PhoneApplicationFrame GetRootPhoneApplicationFrame()
		{
			PhoneApplicationFrame applicationFrame = (Application.Current.RootVisual as PhoneApplicationFrame);
			return applicationFrame;
		}

		private static void Navigate(Uri address)
		{
			PhoneApplicationFrame applicationFrame = GetRootPhoneApplicationFrame();
			if (applicationFrame == null)
			{
				throw new NullReferenceException("applicationFrame must not be null!");
			}

			applicationFrame.Navigate(address);
		}

		private static void GoBack()
		{
			PhoneApplicationFrame applicationFrame = GetRootPhoneApplicationFrame();
			if (applicationFrame == null)
			{
				throw new NullReferenceException("applicationFrame must not be null!");
			}

			if (applicationFrame.CanGoBack)
			{
				applicationFrame.GoBack();
			}
		}
		#endregion
	}
}
